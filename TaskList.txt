////////////////////////////////////////////////

0. Вступительное задание "Hello world"

Hello world
Создайте HTML-страницу с кнопкой «Hello world!»
В обработчик нажатия этой кнопки поместите команду alert(«Hello world!»)
В результате по нажатию на кнопку должно появляться оповещение с текстом «Hello world!».

////////////////////////////////////////////////

1. Написать функцию суммирования значений
Написать функцию sum, которая может быть исполнена любое количество раз с не `undefined` аргументом.
Если она исполнена без аргументов, то возвращает значение суммы всех переданных до этого значений.

sum(1)(2)(3)....(n)() === 1 + 2 + 3 + ... + n

////////////////////////////////////////////////

2. Поиск уникального селектора
Написать алгоритм и функцию `getPath()`, находящую уникальный css-селектор для элемента в документе.
Уникальный селектор может быть использован в `document.querySelector()` и возвращать исходный элемент.
`document.querySelectorAll()`, вызванный с этим селектором, не должен находить никаких элементов, кроме исходного.

```javascript
$0 // HTMLElement
getPath($0) // => "..."

////////////////////////////////////////////////

3. Создать форму авторизации
Создать по центру экрана форму авторизации, поля логин, пароль и кнопку.

При нажатии на кнопку поля должны проверяться на заполненность, если одно из полей не заполнено - выводить ошибку.

Разрешено использовать любые javascript, ui framework и библиотеки

////////////////////////////////////////////////

4. Улучшить форму авторизации
Изменить форму авторизации из прошлого шага.

Если поля заполнены, то при нажатии на кнопку должна появляться иконка прелоадера, при этом поля недоступны для редактирования, кнопка недоступна для нажатия

через 2 секунды форма должна приходить в изначальное состояние.

////////////////////////////////////////////////

5. promiseReduce — работа с асинхронными функциями
promiseReduce — работа с асинхронными функциями

Цель: Написать функцию: promiseReduce(asyncFunctions, reduce, initialValue)

asyncFunctions — массив асинхронных функций, возвращающих Promise.

reduce(memo, value) — функция, которая будет вызвана для каждого успешно завершившегося промиса.

initialValue — стартовое значение для функции reduce.

promiseReduce последовательно вызывает переданные асинхронные функции и выполняет reduce-функцию сразу при получении результата до вызова следующей асинхронной функции.

Функция promiseReduce должна возвращать Promise с конечным результатом.
Пример использования

//javascript
var fn1 = () => {
    console.log('fn1')
    return Promise.resolve(1)
}
 
var fn2 = () => new Promise(resolve => {
    console.log('fn2')
    setTimeout(() => resolve(2), 1000)
})
 
function promiseReduce(asyncFunctions, reduce, initialValue) {
/*
* Реализация
*/
}
 
// Тест кейс
promiseReduce(
   [fn1, fn2],
   function (memo, value) {
      console.log('reduce');
      return memo * value
   },
   1
)
.then(console.log)
 
//Вывод в консоль
//```
//fn1
//reduce
//fn2
//reduce
//2
//```

////////////////////////////////////////////////

6. Создать приложение используя Express
Создать “Hello world” приложение которое будет запускать сервер и слушать соединения на порте 3000. Приложение должно выдавать ответ (любую строку) на запросы, адресованные корневому URL (/). Для всех остальных путей ответом будет 404 Not Found.

Добавить маршрутизацию, обработку запросов POST, PUT, DELETE.

////////////////////////////////////////////////

7. Разработка стартового приложения Angular
Развернуть приложение с помощью Angular CLI. Удалить шаблон сгенерированный Angular CLI, добавить или изменить переменные класса, вывести их в шаблон используя интерполяцию {{}}.

Добавить базовую верстку и стили будущего приложения.

////////////////////////////////////////////////

8. Новый компонент, пайпы, двунаправленная привязка
Создать новый компонент используя CLI.

Вывести данные в шаблон нового компонента используя пайпы.

Добавить поле ввода, используя ngModel добавить возможность редактирования значения какого-либо свойства выводимого в шаблон.

////////////////////////////////////////////////

9. Отображение списка
Отобразить список.

Реализовать выбор элемента из списка:

подсвечивать выбранный элемент
под списком отображать подробную информацию о выбранном элементе

////////////////////////////////////////////////

10. Отображение подробной информации
Создать новый компонент и перенести туда отображение подробной информации для элемента списка.

////////////////////////////////////////////////

11. Создание сервиса
Создать сервис. Вынести в него из компонентов логику не относящуюся к отображению или добавить что-то новое.

////////////////////////////////////////////////

12. Добавление навигации
Добавить роутер в приложение. Настроить маршруты.

При выборе элемента списка, переходить на страницу с  дополнительной информацией.

На странице с дополнительной информацией сделать кнопку "Назад" для перехода обратно к списку.

////////////////////////////////////////////////

13. Взаимодействие с сервером
Реализовать взаимодействие с сервером:

получение списка
получение одного элемента
редактирование/добавление/удаление элементов
Использовать сервер из задания 6.

////////////////////////////////////////////////

14. Формы и валидация
Добавить в приложение форму логина из заданий 3-4. Используя механизм реактивных форм, сделать рефакторинг формы логина, реализовать валидацию.

////////////////////////////////////////////////

15. Работа с PrimeNG
Используя PrimeNG:

заменить кнопки, поля ввода, и т.д. на соответствующие компоненты
изменить лейаут, используя соответствующие инструменты - сетку, лейаут форм
для заголовков применить соответствующие классы
добавить иконки

////////////////////////////////////////////////

16.  Тестирование сервисов
Покрыть тестами имеющиеся сервисы.

////////////////////////////////////////////////

17. Тестирование компонентов
Покрыть тестами имеющиеся компоненты.